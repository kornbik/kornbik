# Use the latest 2.1 version of CircleCI pipeline process engine.

# See: https://circleci.com/docs/2.0/configuration-reference

version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.

# See: https://circleci.com/docs/2.0/orb-intro/

orbs:

  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files

  # Orb commands and jobs help you with common scripting around a language/tool

  # so you dont have to copy and paste it everywhere.

  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python

  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs

jobs:

  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!

    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/

    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub

    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python

    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container

    # Change the version below to your required version of python

    docker:

      - image: cimg/python:3.10.2

    # Checkout the code as the first step. This is a dedicated CircleCI step.

    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.

    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.

    # Then run your tests!

    # CircleCI will report the results back to your VCS provider.

    steps:

      - checkout

      - python/install-packages:

          pkg-manager: pip

          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.

          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.

      - run:

          name: Run tests

          # This assumes pytest is installed via the install-package step above

          command: pytest

# Invoke jobs via workflows

# See: https://circleci.com/docs/2.0/configuration-reference/#workflows

workflows:

  sample: # This is the name of the workflow, feel free to change it to better match your workflow.

    # Inside the workflow, you define the jobs you want to run.

    jobs:

      - build-and-test


version

: 2

jobs:

  build:

    docker:

        - image: circleci/openjdk:latest-node-browsers

    steps:

        - checkout

        - restore_cache:

            keys:

                - sfdx-6.8.2-local

        - run:

            name: Install Salesforce DX

            command: |

                if [ ! -d node_modules/sfdx-cli ]; then

                    export SFDX_AUTOUPDATE_DISABLE=true

                    export SFDX_USE_GENERIC_UNIX_KEYCHAIN=true

                    export SFDX_DOMAIN_RETRY=300

                    npm install sfdx-cli@6.8.2

                    node_modules/sfdx-cli/bin/run --version

                    node_modules/sfdx-cli/bin/run plugins --core

                fi

        - save_cache:

            key: sfdx-6.8.2-local

            paths: 

                - node_modules

        - run: 

            name: Create Scratch Org

            command: |

                openssl aes-256-cbc -k $KEY -in assets/server.key.enc -out assets/server.key -d -md md5

                node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid $CONSUMERKEY --jwtkeyfile assets/server.key --username $USERNAME --setdefaultdevhubusername -a DevHub

                node_modules/sfdx-cli/bin/run force:org:create -v DevHub -s -f config/project-scratch-def.json -a scratch

        - run:

            name: Remove Server Key

            when: always

            command: |

                rm assets/server.key

        - run:

            name: Install Lightning Testing Service

            command: |

                node_modules/sfdx-cli/bin/run force:lightning:test:install -t jasmine

        - run: 

            name: Push Source

            command: |

                node_modules/sfdx-cli/bin/run force:source:push -u scratch

        - run:

            name: Run Apex Tests

            command: |

                mkdir ~/tests

                mkdir ~/tests/apex

                node_modules/sfdx-cli/bin/run force:apex:test:run -u scratch -c -r human -d ~/tests/apex -w 9999

        - run:

            name: Run Lightning Tests

            command: | 

                mkdir ~/tests/lightning

                node_modules/sfdx-cli/bin/run force:lightning:test:run -d ~/tests/lightning -r human -a lightningTests.app -o

        - run: 

            name: Push to Codecov.io (Optional Step)

            command: |

                cp ~/tests/apex/test-result-codecoverage.json .

                bash <(curl -s https://codecov.io/bash)

        - run: 

            name: Clean Up

            when: always

            command: |

                node_modules/sfdx-cli/bin/run force:org:delete -u scratch -p

                rm ~/tests/apex/*.txt ~/tests/apex/test-result-7*.json

        - store_artifacts:

            path: ~/tests

        - store_test_results:

            path: ~/tests
